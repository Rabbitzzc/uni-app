// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SFC analyze <script> bindings auto name inference basic 1`] = `
"const a = 1
export default {
  __name: 'FooBar',
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

return "INLINE_RENDER"
}

}"
`;

exports[`SFC analyze <script> bindings auto name inference do not overwrite manual name (call) 1`] = `
"import { defineComponent } from 'vue'
        const __default__ = defineComponent({
          name: 'Baz'
        })
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;
const a = 1
return "INLINE_RENDER"
}

}"
`;

exports[`SFC analyze <script> bindings auto name inference do not overwrite manual name (object) 1`] = `
"const __default__ = {
          name: 'Baz'
        }
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;
const a = 1
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> binding analysis for destructure 1`] = `
"export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

      const { foo, b: bar, ['x' + 'y']: baz, x: { y, zz: { z }}} = {}
      
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> dev mode import usage check TS annotations 1`] = `
"import { Foo, Bar, Baz, Qux, Fred } from './x'
        const a = 1
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        function b() {}
        
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> dev mode import usage check attribute expressions 1`] = `
"import { bar, baz } from './x'
        const cond = true
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> dev mode import usage check components 1`] = `
"import { FooBar, FooBaz, FooQux, foo } from './x'
        const fooBar: FooBar = 1
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> dev mode import usage check directive 1`] = `
"import { vMyDir } from './x'
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> dev mode import usage check dynamic arguments 1`] = `
"import { FooBar, foo, bar, unused, baz } from './x'
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> dev mode import usage check js template string interpolations 1`] = `
"import { VAR, VAR2, VAR3 } from './x'
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> dev mode import usage check last tag 1`] = `
"import { FooBaz, Last } from './x'
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> dev mode import usage check template ref 1`] = `
"import { foo, bar, Baz } from './foo'
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

          
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> dev mode import usage check vue interpolations 1`] = `
"import { x, y, z, x$y } from './x'
      
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

      
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> errors should allow defineProps/Emit() referencing imported binding 1`] = `
"import { bar } from './bar'
        
export default {
  props: {
          foo: {
            default: () => bar
          }
        },
  emits: {
          foo: () => bar > 1
        },
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        
        
        
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> errors should allow defineProps/Emit() referencing scope var 1`] = `
"const bar = 1
          
export default {
  props: {
            foo: {
              default: bar => bar + 1
            }
          },
  emits: {
            foo: bar => bar > 1
          },
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

          
          
        
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> imports dedupe between user & helper 1`] = `
"import { ref } from 'vue'
      
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

      let foo = $ref(1)
      
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> imports import dedupe between <script> and <script setup> 1`] = `
"import { x } from './x'
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        x()
        
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> imports should allow defineProps/Emit at the start of imports 1`] = `
"import { ref } from 'vue'
      
export default {
  props: ['foo'],
  emits: ['bar'],
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

      
      
      const r = ref(0)
      
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> imports should extract comment for import or type declarations 1`] = `
"import a from 'a' // comment
        import b from 'b'
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> imports should hoist and expose imports 1`] = `
"import { ref } from 'vue'
          import 'foo/css'
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

          
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> imports should support module string names syntax 1`] = `
"import { "üòè" as foo } from './foo'
      
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> inlineTemplate mode avoid unref() when necessary 1`] = `
"import { ref } from 'vue'
        import Foo, { bar } from './Foo.vue'
        import other from './util'
        import * as tree from './tree'
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        const count = ref(0)
        const constant = {}
        const maybe = foo()
        let lett = 1
        function fn() {}
        
return 
function GenAnonymousRender(): any | null {

  return createElementVNode(Fragment, null, [
    createVNode(Foo, null, utsMapOf({
      default: withSlotCtx((): any[] => [toDisplayString(unref(bar))]),
      _: 1 /* STABLE */
    })),
    createElementVNode("view", utsMapOf({ onClick: fn }), toDisplayString(count.value) + " " + toDisplayString(constant) + " " + toDisplayString(unref(maybe)) + " " + toDisplayString(unref(lett)) + " " + toDisplayString(unref(other)), 1 /* TEXT */),
    " " + toDisplayString(tree.foo())
  ], 64 /* STABLE_FRAGMENT */)
}
}

}"
`;

exports[`SFC compile <script setup> inlineTemplate mode referencing scope components and directives 1`] = `
"import ChildComp from './Child.vue'
        import SomeOtherComp from './Other.vue'
        import vMyDir from './my-dir'
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        
return 
function GenAnonymousRender(): any | null {

  return createElementVNode(Fragment, null, [
    withDirectives(createElementVNode("view", null, null, 512 /* NEED_PATCH */), [
      [unref(vMyDir)]
    ]),
    createVNode(ChildComp),
    createVNode(SomeOtherComp)
  ], 64 /* STABLE_FRAGMENT */)
}
}

}"
`;

exports[`SFC compile <script setup> inlineTemplate mode should work 1`] = `
"import { ref } from 'vue'
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        const count = ref(0)
        
return 
function GenAnonymousRender(): any | null {

  return createElementVNode(Fragment, null, [
    createElementVNode("view", null, toDisplayString(count.value), 1 /* TEXT */),
    createElementVNode("view", null, "static")
  ], 64 /* STABLE_FRAGMENT */)
}
}

}"
`;

exports[`SFC compile <script setup> inlineTemplate mode template assignment expression codegen 1`] = `
"import { ref } from 'vue'
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        const count = ref(0)
        const maybe = foo()
        let lett = 1
        let v = ref(1)
        
return 
function GenAnonymousRender(): any | null {

  return createElementVNode(Fragment, null, [
    createElementVNode("view", utsMapOf({
      onClick: () => {count.value = 1}
    }), null, 8 /* PROPS */, ["onClick"]),
    createElementVNode("view", utsMapOf({
      onClick: () => {maybe.value = count.value}
    }), null, 8 /* PROPS */, ["onClick"]),
    createElementVNode("view", utsMapOf({
      onClick: () => {isRef(lett) ? lett.value = count.value : lett = count.value}
    }), null, 8 /* PROPS */, ["onClick"]),
    createElementVNode("view", utsMapOf({
      onClick: () => {isRef(v) ? v.value += 1 : v += 1}
    }), null, 8 /* PROPS */, ["onClick"]),
    createElementVNode("view", utsMapOf({
      onClick: () => {isRef(v) ? v.value -= 1 : v -= 1}
    }), null, 8 /* PROPS */, ["onClick"]),
    createElementVNode("view", utsMapOf({
      onClick: () => {
              let a = '' + unref(lett)
              isRef(v) ? v.value = a : v = a
           }
    }), null, 8 /* PROPS */, ["onClick"]),
    createElementVNode("view", utsMapOf({
      onClick: () => {
              // nested scopes
              (()=>{
                let x = _ctx.a
                (()=>{
                  let z = x
                  let z2 = z
                })
                let lz = _ctx.z
              })
              isRef(v) ? v.value = _ctx.a : v = _ctx.a
           }
    }), null, 8 /* PROPS */, ["onClick"])
  ], 64 /* STABLE_FRAGMENT */)
}
}

}"
`;

exports[`SFC compile <script setup> inlineTemplate mode template destructure assignment codegen 1`] = `
"import { ref } from 'vue'
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        const val = {}
        const count = ref(0)
        const maybe = foo()
        let lett = 1
        
return 
function GenAnonymousRender(): any | null {

  return createElementVNode(Fragment, null, [
    createElementVNode("view", utsMapOf({
      onClick: () => {({ count: count.value } = val)}
    }), null, 8 /* PROPS */, ["onClick"]),
    createElementVNode("view", utsMapOf({
      onClick: () => {[maybe.value] = val}
    }), null, 8 /* PROPS */, ["onClick"]),
    createElementVNode("view", utsMapOf({
      onClick: () => {({ lett: lett } = val)}
    }), null, 8 /* PROPS */, ["onClick"])
  ], 64 /* STABLE_FRAGMENT */)
}
}

}"
`;

exports[`SFC compile <script setup> inlineTemplate mode template update expression codegen 1`] = `
"import { ref } from 'vue'
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        const count = ref(0)
        const maybe = foo()
        let lett = 1
        
return 
function GenAnonymousRender(): any | null {

  return createElementVNode(Fragment, null, [
    createElementVNode("view", utsMapOf({
      onClick: () => {count.value++}
    }), null, 8 /* PROPS */, ["onClick"]),
    createElementVNode("view", utsMapOf({
      onClick: () => {--count.value}
    }), null, 8 /* PROPS */, ["onClick"]),
    createElementVNode("view", utsMapOf({
      onClick: () => {maybe.value++}
    }), null, 8 /* PROPS */, ["onClick"]),
    createElementVNode("view", utsMapOf({
      onClick: () => {--maybe.value}
    }), null, 8 /* PROPS */, ["onClick"]),
    createElementVNode("view", utsMapOf({
      onClick: () => {isRef(lett) ? lett.value++ : lett++}
    }), null, 8 /* PROPS */, ["onClick"]),
    createElementVNode("view", utsMapOf({
      onClick: () => {isRef(lett) ? --lett.value : --lett}
    }), null, 8 /* PROPS */, ["onClick"])
  ], 64 /* STABLE_FRAGMENT */)
}
}

}"
`;

exports[`SFC compile <script setup> inlineTemplate mode v-model codegen 1`] = `
"import { ref } from 'vue'
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        const count = ref(0)
        const maybe = foo()
        let lett = 1
        
return 
function GenAnonymousRender(): any | null {

  return createElementVNode(Fragment, null, [
    createElementVNode("input", utsMapOf({
      modelValue: count.value,
      onInput: ($event: InputEvent) => {(count).value = $event.detail.value}
    }), null, 40 /* PROPS, NEED_HYDRATION */, ["modelValue", "onInput"]),
    createElementVNode("input", utsMapOf({
      modelValue: unref(maybe),
      onInput: ($event: InputEvent) => {if(isRef(maybe)) { (maybe).value = $event.detail.value }}
    }), null, 40 /* PROPS, NEED_HYDRATION */, ["modelValue", "onInput"]),
    createElementVNode("input", utsMapOf({
      modelValue: unref(lett),
      onInput: ($event: InputEvent) => {if(isRef(lett)) { (lett).value = $event.detail.value } else { lett = $event.detail.value }}
    }), null, 40 /* PROPS, NEED_HYDRATION */, ["modelValue", "onInput"])
  ], 64 /* STABLE_FRAGMENT */)
}
}

}"
`;

exports[`SFC compile <script setup> inlineTemplate mode with defineExpose() 1`] = `
"export default {
  setup(__props: GenAnonymous, { expose: __expose }: SetupContext) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        const count = ref(0)
        __expose({ count })
        
return function GenAnonymousRender(): any | null { return null }
}

}"
`;

exports[`SFC compile <script setup> should compile JS syntax 1`] = `
"const a = 1
      const b = 2
      
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

      
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> should expose top level declarations 1`] = `
"import { x } from './x'
      
      import { xx } from './x'
      let aa = 1
      const bb = 2
      function cc() {}
      class dd {}
      

export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

      let a = 1
      const b = 2
      function c() {}
      class d {}
      
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> with TypeScript const Enum 1`] = `
"const enum Foo { A = 123 }
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> with TypeScript hoist type declarations 1`] = `
"export interface Foo {}
        type Bar = {}
      
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> with TypeScript runtime Enum 1`] = `
"enum Foo { A = 123 }
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        
return "INLINE_RENDER"
}

}"
`;

exports[`SFC compile <script setup> with TypeScript runtime Enum in normal script 1`] = `
"export enum D { D = "D" }
          const enum C { C = "C" }
          enum B { B = "B" }
        
export default {
  setup(__props: GenAnonymous) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as GenAnonymous;
const _cache = __ins.renderCache;

        enum Foo { A = 123 }
        
return "INLINE_RENDER"
}

}"
`;
